<style lang="less">
  @import 'style/weui.less';
  page{
    background-color: #F8F8F8;
    font-size: 16px;
  }
  .page__hd {
    padding: 40px;
  }
  .page__bd {
    padding-bottom: 40px;
  }
  .page__bd_spacing {
    padding-left: 15px;
    padding-right: 15px;
  }
  .page__ft{
    padding-bottom: 10px;
    text-align: center;
  }
  .page__title {
    text-align: left;
    font-size: 20px;
    font-weight: 400;
  }
  .page__desc {
    margin-top: 5px;
    color: #888888;
    text-align: left;
    font-size: 14px;
  }
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import api from '@/utils/api'

export default class extends wepy.app {
  config = {
    pages: [
      'pages/articles/index',
      'pages/articles/show',
      'pages/articles/userIndex',
      'pages/users/me',
      'pages/users/edit',
      'pages/users/show',
      'pages/replies/index',
      'pages/auth/login',
      'pages/auth/register'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      list: [
        {
          pagePath: 'pages/articles/index',
          text: '首页',
          iconPath: 'images/index.png',
          selectedIconPath: 'images/index_selected.png'
        },
        {
          pagePath: 'pages/users/me',
          text: '我的',
          iconPath: 'images/user.png',
          selectedIconPath: 'images/user_selected.png'
        }
      ],
      color: '#707070',
      selectedColor: '#00b5ad'
    }
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  // 由于我们使用了 WePY 框架，所有小程序的接口都需要使用 wepy 对象调用，例如 wx.login() 就需要使用 wepy.login()。
  onLaunch() {
    // // 在小程序中调用 wepy.login() 接口，获取 Code
    // wepy.login().then(res => {
    //   console.log('login: ', res)
    // })
  }

  // 获取当前用户登陆信息
  async getCurrentUser() {
    // 如果用户没有登陆
    if (!this.checkLogin()) {
      return null
    }
    let user = wepy.getStorageSync('user')  // 从缓存中获取用户信息
    try {
      // 已经登陆但是缓存中没有 user， 请求接口获取
      if (!user) {
        let userResponse = await api.authRequest('user')  // 请求服务器的 api.user.show 路由 返回了用户信息
        // 返回码为 200 则请求成功
        if (userResponse.statusCode === 200) {
          user = userResponse.data
          wepy.setStorageSync('user', user)
        }
      }
    } catch (err) {
      console.log(err)
      wepy.showModal({
        title: '提示',
        content: '服务器错误，请联系管理员'
      })
    }
    return user
  }

  // 判断用户是否登陆
  // 该方法只判断缓存中是否存在 access_token，存在则说明用户已经登录过了，返回 true，否则返回 false
  checkLogin() {
    return (wepy.getStorageSync('access_token') !== '')
  }

  globalData = {
    // refreshPages，是个数组，意思是需要刷新的页面，可以在页面的 onShow 方法中通过 this.$parent.globalData.refreshPages 获取或设置全局数据
    refreshPages: []
  }

  // 用来检测传入的页面路由是否在 refreshPages 数组中，如果存在，则将路由移除 refreshPages，并执行传入的回调方法
  checkRefreshPages(route, callback) {
    let refreshIndex = this.globalData.refreshPages.indexOf(route)
    if (refreshIndex === -1) {
      return
    }
    this.globalData.refreshPages.splice(refreshIndex, 1)
    callback && callback()
  }
}
</script>
