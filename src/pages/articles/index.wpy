<style lang="less">
  .weui-media-box__info__meta {
    margin: 0;
    font-size: 12px;
  }
  .article-info {
    margin-top: 5px;
  }
  .article-title {
    white-space: normal;
    font-size: 14px;
  }
  .avatar {
    padding: 4px;
    border: 1px solid #ddd;
    border-radius: 4px;
    width: 50px;
    height: 50px;
  }
  .reply-count {
    background-color: #d8d8d8;
    float: right;
  }
  /*分类*/
  .weui-flex {
    align-items: center;
  }
  .weui-cells {
    margin-top: 0;
    opacity: 0;
    transition: .3s;
    &:before, &:after {
        display: none;
    }
    &_show {
        opacity: 1;
    }
  }
  .weui-cell {
    &:before {
        right: 15px;
    }
  }
  .category-list__item {
    // margin: 10px 0;
    background-color: #FFFFFF;
    border-radius: 2px;
    overflow: hidden;
    &:first-child {
        margin-top: 0;
    }
  }
  .category-list__item_selected {
    background-color: #eeeeee;
  }
  .category-list__img {
    width: 30px;
    height: 30px;
  }

  .category-list__item-hd {
    padding: 20px;
    transition: opacity .3s;
    &_show {
        opacity: .4;
    }
  }
  .category-list__item-bd {
    height: 0;
    overflow: hidden;
    &_show {
        height: auto;
    }
  }
</style>
<template>
<view class="page">
  <view class="category-list__item">
    <view class="weui-flex category-list__item-hd" @tap="toggle">
        <view class="weui-flex__item page-title">{{ currentCategory.title || '话题' }}</view>
        <image class="category-list__img" src="/images/category.png"></image>
    </view>

    <view class="category-list__item-bd {{ categoryOpen ? 'category-list__item-bd_show' : '' }}">
      <view class="weui-cells {{ categoryOpen ? 'weui-cells_show' : '' }}">
        <view @tap="changeCategory()" class="weui-cell weui-cell_access {{ !currentCategory.id ? 'category-list__item_selected' : '' }}">
          <view class="weui-cell__bd">话题</view>
        </view>
        <repeat for="{{ categories }}" item="category" key="id">
          <view @tap="changeCategory({{ category.id }})" class="weui-cell weui-cell_access {{ currentCategory.id == category.id ? 'category-list__item_selected' : '' }}">
            <view class="weui-cell__bd">{{ category.title }}</view>
          </view>
        </repeat>
      </view>
    </view>
  </view>
  <view class="page__bd">
    <view class="weui-panel weui-panel_access">
      <view class="weui-panel__bd">
        <repeat for="{{ articles }}" key="id" index="index" item="article">
          <navigator url="" class="weui-media-box weui-media-box_appmsg" hover-class="weui-cell_active">
            <view class="weui-media-box__hd weui-media-box__hd_in-appmsg">
              <image class="weui-media-box__thumb avatar" src="{{ article.user.avatar }}" />
            </view>
            <view class="weui-media-box__bd weui-media-box__bd_in-appmsg">
              <view class="weui-media-box__title article-title">{{ article.title }}</view>

              <view class="weui-media-box__info article-info">
                <view class="weui-media-box__info__meta">{{ article.category.title }} • </view>
                <view class="weui-media-box__info__meta">{{ article.user.name }} • </view>
                <view class="weui-media-box__info__meta">{{ article.updated_at_diff }}</view>
              </view>
            </view>
            <view class="weui-badge reply-count">{{ article.reply_count }}</view>
          </navigator>
        </repeat>
        <view class="weui-loadmore weui-loadmore_line" wx:if="{{ noMoreData }}">
          <view class="weui-loadmore__tips weui-loadmore__tips_in-line">没有更多数据</view>
        </view>
      </view>
    </view>
  </view>
</view>
</template>
<script>
  import wepy from 'wepy'
  import api from '@/utils/api'
  import util from '@/utils/util'

  export default class ArticleIndex extends wepy.page {
    config = {
      enablePullDownRefresh: true
    }
    data = {
      // 话题数据
      articles: [],
      // 当前分页
      page: 1,
      noMoreData: false,
      categories: [],
      categoryOpen: false,
      currentCategory: {}
    }
    computed = {
      currentCategoryId() {
        return this.currentCategory.id || 0
      }
    }

    // 获取分类
    // 先从缓存中获取分类 wepy.getStorageSync('categories')，如果没有则请求一次服务器接口，获取分类并缓存下来
    async getCategories() {
      // 从缓存中获取分类数据
      let categories = wepy.getStorageSync('categories')
      if (!categories) {
        try {
          let categoriesResponse = await api.request('categories')
          // 请求成功将数据添加至缓存
          if (categoriesResponse.statusCode === 200) {
            categories = categoriesResponse.data.data
            wepy.setStorageSync('categories', categories)
          }
        } catch (err) {
          wepy.showModal({
            title: '提示',
            content: '服务器错误，请联系管理员'
          })
        }
      }
      this.categories = categories
      this.$apply()
    }
    // 获取话题数据
    async getArticles(page = 1, reset = false) {
      try {
        let articlesResponse = await api.request({
          url: 'articles',
          data: {
            page: page, // 分类
            include: 'user,category',
            category_id: this.currentCategoryId
          }
        })
        let articles = articlesResponse.data.data
        articles.forEach(function (article) {
          article.updated_at_diff = util.diffForHumans(article.updated_at) // 调用 moment 的函数处理时间显示
        })
        // 如果传入参数 reset 为true，则覆盖 articles
        this.articles = reset ? articles : this.articles.concat(articles)

        let pagination = articlesResponse.data.meta.pagination

        // 根据分页设置是否还有更多数据
        if (pagination.current_page === pagination.total_pages) {
          this.noMoreData = true
        }
        this.$apply()
      } catch (err) {
        console.log(err)
        wepy.showModal({
          title: '提示',
          content: '服务器错误，请联系管理员'
        })
      }
    }

    async onPullDownRefresh() {
      this.noMoreData = false
      this.page = 1
      await this.getArticles(1, true)
      wepy.stopPullDownRefresh()
    }

    async onReachBottom () {
      // 如果没有更多内容，直接返回
      if (this.noMoreData) {
        return
      }
      this.page = this.page + 1
      await this.getArticles(this.page)
      this.$apply()
    }

    async onLoad() {
      this.getArticles()  // 在页面首次加载 onload 事件处理方法中调用 getArticles
      this.getCategories()  // 在页面首次加载 onLoad 事件处理方法中调用 getCategories
    }

    methods = {
      toggle () {
        this.categoryOpen = !this.categoryOpen
      },
      async changeCategory (id = 0) {
        // 找到选中的分类
        this.currentCategory = id ? this.categories.find(category => category.id === id) : {}
        // 点击以后关闭下拉列表
        this.categoryOpen = false
        this.$apply()
        await this.getArticles(1, true)
      }
    }
  }
</script>
