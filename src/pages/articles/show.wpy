<style lang="less">
page{
    background-color: #FFFFFF;
}
.avatar-wrap {
  position: relative;
  margin-right: 10px;
}
.avatar {
  width: 50px;
  height: 50px;
  display: block;
  border-radius: 50%;
}
.article-title {
  padding: 15px;
}
</style>
<template>
  <view class="page">
    <view class="page__bd">
      <view class="weui-cells weui-cells_after-title">
        <navigator class="weui-cell" url="/pages/users/show?id={{ article.user.id }}" open-type="redirect">
          <view class="weui-cell__hd avatar-wrap">
            <image class="avatar" src="{{ article.user.avatar }}"/>
          </view>
          <view class="weui-cell__bd">
            <view>{{ article.user.name }}</view>
            <view class="page__desc">{{ article.user.introduction }}</view>
          </view>
          <!-- 向右的箭头 告知用户这个是可以点击的-->
          <view class="weui-cell__ft weui-cell__ft_in-access"></view>
        </navigator>
      </view>
      <view class="article-title">
        <view class="page__title">{{ article.title }}</view>
        <view class="weui-media-box__info article-info">
          <view class="weui-media-box__info__meta">{{ article.category.title }} • </view>
          <view class="weui-media-box__info__meta">{{ article.updated_at_diff }} • </view>
          <view class="weui-media-box__info__meta">{{ article.reply_count }} 次回复</view>
        </view>
      </view>
      <view class="weui-article">
        <rich-text nodes="{{ article.content }}" bindtap="tap"></rich-text>
        <!-- 删除按钮 -->
        <button wx:if="{{ canDelete }}" @tap="deleteArticle" class="weui-btn mini-btn" type="default" size="mini">删除</button>
      </view>
      <!-- 话题回复 -->
      <view class="weui-panel weui-panel_access" wx:if="{{ article.reply_count }}">
        <view class="weui-panel__hd">回复 ({{ article.reply_count }})</view>
        <view class="weui-panel__bd">
          <repeat for="{{ article.topFiveReplies.data }}" wx:key="id" index="index" item="reply">
            <view class="weui-media-box weui-media-box_appmsg" hover-class="weui-cell_active">
              <navigator class="weui-media-box__hd weui-media-box__hd_in-appmsg" url="/pages/users/show?id={{ reply.user.id }}">
                <image class="replyer-avatar weui-media-box__thumb" src="{{ reply.user.avatar }}" />
              </navigator>
              <view class="weui-media-box__bd weui-media-box__bd_in-appmsg">
                <view class="weui-media-box__title">{{ reply.user.name }}</view>
                <view class="weui-media-box__desc"><rich-text nodes="{{ reply.content }}" bindtap="tap"></rich-text></view>
                <view class="weui-media-box__info">
                  <view class="weui-media-box__info__meta">{{ reply.created_at_diff }}</view>
                </view>
              </view>
            </view>
          </repeat>
        </view>
        <view class="weui-panel__ft">
          <navigator class="weui-cell weui-cell_access weui-cell_link" url="/pages/replies/index?article_id={{ article.id }}">
            <view class="weui-cell__bd">查看全部回复</view>
            <view class="weui-cell__ft weui-cell__ft_in-access"></view>
          </navigator>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'
  import api from '@/utils/api'
  import util from '@/utils/util'

  export default class ArticleShow extends wepy.page {
    config = {
      navigationBarTitleText: '话题详情'
    }
    data = {
      article: null, // 话题数据
      user: null  // 当前登陆用户
    }
    // 计算属性 计算属性中如果有 await 的异步处理，会与预期不符 所以获取用户信息的请求在 onLoad 方法中定义
    computed = {
      // 是否有权限删除文章
      canDelete() {
        if (!this.article || !this.user) {
          return false
        }
        // 当前用户是否是当前文章的作者
        return this.user.id === this.article.user.id
      }
    }
    // 获取话题数据
    async getArticle(id) {
      try {
        let articleResponse = await api.request({
          url: 'articles/' + id,
          data: {
            include: 'user,category,topFiveReplies.user'
          }
        })
        if (articleResponse.statusCode === 200) {
          let article = articleResponse.data
          article.updated_at_diff = util.diffForHumans(article.updated_at)  // 格式化 updated_at
          // 处理评论时间的发布时间
          article.topFiveReplies.data.forEach(function (reply) {
            reply.created_at_diff = util.diffForHumans(reply.created_at)
          })
          this.article = article
          this.$apply()
        }
        if (articleResponse.statusCode === 404) {
          wepy.navigateBack()
        }
        return articleResponse
      } catch (err) {
        console.log(err)
        wepy.showModal({
          title: '提示',
          content: '服务器错误，请联系管理员'
        })
      }
    }

    methods = {
      async deleteArticle() {
        // 弹框删除确认
        let res = await wepy.showModal({
          title: '确认删除',
          content: '您确认删除该文章么',
          confirmText: '确认',
          cancelText: '取消'
        })
        // 用户点击取消则返回
        if (!res.confirm) {
          return
        }
        // 调用删除文章接口
        let deleteResponse = await api.authRequest({
          url: 'articles/' + this.article.id,
          method: 'DELETE'
        })
        // 删除成功， 给出提示
        if (deleteResponse.statusCode === 204) {
          wepy.showToast({
            title: '提示',
            icon: 'success'
          })
          // 设置全局变量，控制列表刷新
          let pages = this.getCurrentPages()
          // 如果有上一页
          if (pages.length > 1) {
            // 检查所有已打开的页面，如果是话题列表页面则记录下来
            let refreshPages = []
            pages.forEach((page) => {
              // 已打开的页面中包含 话题列表 或者 用户的话题列表
              if (page.route === 'pages/articles/index' || page.route === 'pages/articles/userIndex') {
                refreshPages.push(page.route)
              }
            })
            this.$parent.globalData.refreshPages = this.$parent.globalData.refreshPages.concat(refreshPages)
            this.$apply()
          }
          // 2 秒后返回上一页
          setTimeout(function () {
            wepy.navigateBack()
          }, 2000)
        }
      }
    }
    async onLoad(options) {
      this.getArticle(options.id)
      // 获取当前用户
      this.user = await this.$parent.getCurrentUser()
      this.$apply()
    }
  }
</script>
